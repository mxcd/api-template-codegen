// @ts-ignore
import {prisma, authBlock, authedUserInGroups, checkAuthorization, lifecycleHook} from "../util";
// @ts-ignore
import {ApolloError, ForbiddenError} from "apollo-server-errors";

<%_ if(model.methods['read']) { %>
export async function get<%= model.upperCamelCaseName %>(parent, args, context, info) {

    await checkAuthorization(`get<%= model.upperCamelCaseName %>`, {parent, args, context, info});

    const id = args.id;
    await lifecycleHook(`preFetch`, `get<%= model.upperCamelCaseName %>`, { args, context });
    const <%= model.lowerCamelCaseName %> = await prisma.<%= model.lowerCamelCaseName %>.findUnique({where: {id}});
    await lifecycleHook(`postFetch`, `get<%= model.upperCamelCaseName %>`, { item: <%= model.lowerCamelCaseName %>, args, context });
    if(!<%= model.lowerCamelCaseName %>) {
        throw new ApolloError(`No <%= model.upperCamelCaseName %> with ID '${id}' found`, "NOT_FOUND")
    }
    return <%= model.lowerCamelCaseName %>;
}
<%_ } -%>

<%_ if(model.methods['read']) { %>
export async function get<%= model.upperCamelCasePluralName%>(parent, args, context, info) {

    await checkAuthorization(`get<%= model.upperCamelCasePluralName%>`, {parent, args, context, info});

    const filter:any = args.filter;
    const search:string = args.search;
    const sort: any = args.sort;
    let where: any = {};

    where['AND'] = [];

    if(filter) {
<% for(const filterField of model.filterFields) { -%>
    <%_ if(filterField.dataType === 'DateTime' || filterField.dataType === 'Int' || filterField.dataType === 'Float') { -%>
        // Filter for <%= filterField.name %> range
        if(filter.<%= filterField.name %>Range) {
            if(filter.<%= filterField.name %>Range.gte) {
                where['AND'].push({<%= filterField.name %>: {gte: filter.<%= filterField.name %>Range.gte}});
            }
            if(filter.<%= filterField.name %>Range.lte) {
                where['AND'].push({<%= filterField.name %>: {lte: filter.<%= filterField.name %>Range.lte}});
            }
        }
        // Filter for <%= filterField.name %> match with '<%= filterField.filterMode %>' modifier
        if(filter.<%= filterField.name %>) where['AND'].push({<%= filterField.name %>: {<%= filterField.filterMode %>: filter.<%= filterField.name %>}});
    <%_ } -%>
<%_ } -%>
    }

    if(search) {
        where['OR'] = [
<% for(const searchField of model.searchFields) { -%>
            {<%= searchField.name %>: {<%= searchField.searchMode %>: search, mode: `insensitive`}},
<% } -%>
        ]
    }

    const limit: number = parseInt(args.limit) || 100
    const offset: number = parseInt(args.offset) || 0

    let orderBy: any = [];
    if(sort) {
        for(const key in sort) {
            let sort = {}
            sort[key] = args.sort[key].toLowerCase();
            orderBy.push(sort);
        }
    }

    await lifecycleHook(`preFetchList`, `get<%= model.upperCamelCasePluralName%>`, { where, limit, offset, orderBy, args, context });
    const results = await prisma.$transaction([
        prisma.<%= model.lowerCamelCaseName %>.count({where}),
        prisma.<%= model.lowerCamelCaseName %>.findMany({
            where,
            orderBy,
            take: limit,
            skip: offset
        })
    ])
    const total = results[0];
    const items = results[1];
    await lifecycleHook(`postFetchList`, `get<%= model.upperCamelCasePluralName%>`, { total, items, args, context });
    return {
        total,
        items
    };
}
<% } -%>

<% for(const relationField of model.relationFields) { %>
export async function get<%= relationField.upperCamelCaseName %>For<%= model.upperCamelCaseName %>(parent, args, context, info) {
    
    await checkAuthorization(`get<%= relationField.upperCamelCaseName %>For<%= model.upperCamelCaseName %>`, {parent, args, context, info});

    const id = parent.id;

    <%_ if(relationField.isArray) { %>
    const filter:any = args.filter;
    const search:string = args.search;
    const sort: any = args.sort;
    let where: any = {};

    where['AND'] = [];

    if(filter) {
        <%_ for(const filterField of relationField.model.filterFields) { -%>
        if(filter.<%= filterField.name %>) where['AND'].push({<%= filterField.name %>: {<%= filterField.filterMode %>: filter.<%= filterField.name %>}});
        <%_ } -%>
    }

    if(search) {
        where['OR'] = [
        <%_ for(const searchField of relationField.model.searchFields) { -%>
            {<%= searchField.name %>: {<%= searchField.searchMode %>: search, mode: `insensitive`}},
        <%_ } -%>
        ]
    }

    const limit: number = parseInt(args.limit) || 100
    const offset: number = parseInt(args.offset) || 0

    let orderBy: any = [];
    if(sort) {
        for(const key in sort) {
            let sort = {}
            sort[key] = args.sort[key].toLowerCase();
            orderBy.push(sort);
        }
    }

    await lifecycleHook(`preFetchRelationalList`, `get<%= relationField.upperCamelCaseName %>For<%= model.upperCamelCaseName %>`, { limit, offset, where, orderBy, args, context, parent });
    const <%= model.lowerCamelCaseName %> = await prisma.<%= model.lowerCamelCaseName %>.findUnique({
        where: {id},
        include: {
            <%= relationField.name %>: { take: limit, skip: offset, where, orderBy}
    }});
    <%_ } else { -%>
    await lifecycleHook(`preFetchRelationalList`, `get<%= relationField.upperCamelCaseName %>For<%= model.upperCamelCaseName %>`, { args, context, parent });
    const <%= model.lowerCamelCaseName %> = await prisma.<%= model.lowerCamelCaseName %>.findUnique({where: {id}, include: {<%= relationField.name %>: true}})
    <%_ } -%>

    await lifecycleHook(`postFetchRelationalList`, `get<%= relationField.upperCamelCaseName %>For<%= model.upperCamelCaseName %>`, { item: <%= model.lowerCamelCaseName %>, args, context, parent });
    if(<%= model.lowerCamelCaseName %> !== null) {
        return <%= model.lowerCamelCaseName %>.<%= relationField.name %>;
    }
    else {
        <%_ if(relationField.isArray) { -%>
        return [];
        <%_ } else { -%>
        return null;
        <%_ } -%>
    }
}
<% } %>

<% if(model.methods['create']) { %>
export async function create<%= model.upperCamelCaseName %>(parent, args, context, info) {

    await checkAuthorization(`create<%= model.upperCamelCaseName %>`, {parent, args, context, info});

    const data:any = {}
    <%_ for(const field of model.fields) { -%>
        <%_ if(field.name !== 'createdAt' && field.name !== 'createdBy' && field.name !== 'modifiedAt' && field.name !== 'modifiedBy' && field.name !== 'id') { -%>
            <%_ if(field.isModel) { -%>
                <%_ if(field.isArray) { -%>
    if('<%= field.name %>' in args.inputs) {
        data['<%= field.name %>'] = {};
        data['<%= field.name %>']['connect'] = args.inputs['<%= field.name %>'].map((e:number) => { return { id: e } });
    }
                <%_ } else { -%>
    if('<%= field.name %>' in args.inputs) {
        data['<%= field.name %>'] = {};
        data['<%= field.name %>']['connect'] = { id: args.inputs['<%= field.name %>'] };
    }
                <%_ } -%>
            <%_ } else { -%>
    if('<%= field.name %>' in args.inputs) data['<%= field.name %>'] = args.inputs['<%= field.name %>']
            <%_ } -%>
        <%_ } -%>
    <%_ } -%>
    data['createdBy'] = typeof(context.user) !== 'undefined' && typeof(context.user.username) !== 'undefined' ? context.user.username : 'undefined'
    data['modifiedBy'] = typeof(context.user) !== 'undefined' && typeof(context.user.username) !== 'undefined' ? context.user.username : 'undefined'
    await lifecycleHook(`preCreate`, `create<%= model.upperCamelCaseName %>`, { data, args, context });
    const <%= model.lowerCamelCaseName %> = await prisma.<%= model.lowerCamelCaseName %>.create({data});
    await lifecycleHook(`postCreate`, `create<%= model.upperCamelCaseName %>`, { item: <%= model.lowerCamelCaseName %>, args, context });
    return <%= model.lowerCamelCaseName %>;
}
<% } -%>

<% if(model.methods['update']) { %>
export async function edit<%= model.upperCamelCaseName %>(parent, args, context, info) {

    await checkAuthorization(`edit<%= model.upperCamelCaseName %>`, {parent, args, context, info});

    const id = args.id;
    const data:any = {}
    <%_ for(const field of model.fields) { -%>
        <%_ if(field.name !== 'createdAt' && field.name !== 'createdBy' && field.name !== 'modifiedAt' && field.name !== 'modifiedBy' && field.name !== 'id') { -%>
            <%_ if(field.isModel) { -%>
                <%_ if(field.isArray) { -%>
    if('<%= field.name %>' in args.inputs) {
        data['<%= field.name %>'] = {};
        data['<%= field.name %>']['set'] = args.inputs['<%= field.name %>'].map((e:number) => { return { id: e } });
    }
                <%_ } else { -%>
    if('<%= field.name %>' in args.inputs) {
        data['<%= field.name %>'] = {};
        data['<%= field.name %>']['set'] = { id: args.inputs['<%= field.name %>'] };
    }
                <%_ } -%>
            <%_ } else { -%>
    if('<%= field.name %>' in args.inputs) data['<%= field.name %>'] = args.inputs['<%= field.name %>']
            <%_ } -%>
        <%_ } -%>
    <%_ } -%>
    data['modifiedBy'] = typeof(context.user) !== 'undefined' && typeof(context.user.username) !== 'undefined' ? context.user.username : 'undefined'
    data['modifiedAt'] = new Date();
    
    await lifecycleHook(`preUpdate`, `edit<%= model.upperCamelCaseName %>`, { data, args, context });
    const <%= model.lowerCamelCaseName %> = await prisma.<%= model.lowerCamelCaseName %>.update({where: {id}, data});
    await lifecycleHook(`postUpdate`, `edit<%= model.upperCamelCaseName %>`, { item: <%= model.lowerCamelCaseName %>, args, context });
    return <%= model.lowerCamelCaseName %>;
}
<% } -%>

<% if(model.methods['delete']) { %>
export async function delete<%= model.upperCamelCaseName %>(parent, args, context, info) {

    await checkAuthorization(`delete<%= model.upperCamelCaseName %>`, {parent, args, context, info});
    
    const id = args.id;
    await lifecycleHook(`postDelete`, `delete<%= model.upperCamelCaseName %>`, { args, context });
    await prisma.<%= model.lowerCamelCaseName %>.delete({where: {id}});
    await lifecycleHook(`postDelete`, `delete<%= model.upperCamelCaseName %>`, { args, context });
    return true;
}
<% } -%>
